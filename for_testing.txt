R = rule([_], [                                                                                        [te, rog, nu, iti, cere, scuze],                                                                          [de, ce, simti, nevoia, sa, iti, ceri, scuze, '?'],                                                       [nu, e, nicio, problema]                                                                                  ], [], [], []), XX = rule([_], [                                                                          [te, rog, nu, iti, cere, scuze],                                                                          [de, ce, simti, nevoia, sa, iti, ceri, scuze, '?'],                                                       [nu, e, nicio, problema]                                                                                  ], [], [], []), List = [R, XX], rulesList2answersList(List, ZZZ), Mem = memory{'te rog nu iti cere scuze':2}, compose_list_for_min_element(Mem, ZZZ, TTT), min_element(TTT, FFFFFFFF).

===============================================================================================

Tokens = [cum,ma,simt,?], UserMemory = memory{'sunt fericit':2,'sunt trist':3}, BotMemory = memory{}.

=====================================================================

Tokens = [cum,ma,simt,?], UserMemory = memory{'sunt fericit':2,'sunt trist':3}, BotMemory = memory{}, rules(KeyWords, RulesList), ord_subset(KeyWords, Tokens), member(Rule, RulesList),  match_rule(Tokens, UserMemory, Rule).

=======================================================================================

Tokens = [cum,ma,simt,?], UserMemory = memory{'sunt fericit':2,'sunt trist':3}, BotMemory = memory{}, rules(KeyWords, RulesList), ord_subset(KeyWords, Tokens), find_matching_rules(Tokens, RulesList, UserMemory, [Rule, _]), get_answers_from_rule(Rule, Answers), compose_list_for_min_element(BotMemory, Answers, List), min_element(List, AnswerStr), words(AnswerStr, Answer).
